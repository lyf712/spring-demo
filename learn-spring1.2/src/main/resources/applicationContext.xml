<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 由 Spring容器创建该类的实例对象 -->

<!--    包扫描-->
    <context:component-scan base-package="com.lyf.assembly.annotation"/>

    <!--加载的bean为实现类-->
    <bean id="UserDao" class="com.lyf.dao.impl.UserDaoImpl" />

    <bean id="UserService" class="com.lyf.service.impl.UserServiceImpl">
       <!--将UserDao实例注入UserService-->
        <property name="userDao" ref="UserDao"/>
    </bean>


<!--    普通构造器加载-->
    <bean id="UserDao1" class="com.lyf.instance.UserByConstructor"/>

<!--    指明bean factory-->
    <bean id="factory" class="com.lyf.instance.InstanceFactory"/>
<!--    指明factory中的createBean的方法，静态的区别在于工厂无需创建构造器，createBean为静态-->
    <bean id="UserDao2"  factory-bean="factory" factory-method="createBean"/>


    <!--xml装配-->
    <bean id="User1" class="com.lyf.assembly.User">
        <property name="name" value="lyf"/>
        <property name="age" value="2"/>
    </bean>

    <bean id="User2" class="com.lyf.assembly.User">
        <property name="name" value="lyf2"/>
        <property name="age" value="3"/>
    </bean>


<!--    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
<!--        <property name="location" value="database.properties"/>-->
<!--    </bean>-->

    <context:property-placeholder location="classpath:database.properties"/>

    <!--配置数据源-->


    <!--org.springframework.jdbc.datasource.DriverManagerDataSource-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>


    <!--mybatis整合-->

    <!-- 配置mybatis工厂，同时指定数据源，并与MyBatis完美整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- configLocation的属性值为Mybatis的核心配置文件 -->
        <!--config文件配置包扫描（mapper的位置）-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!-- Mapper代理开发，使用Spring自动扫描Mybatis的接口并装配 -->

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--dao的位置，service和controller后面再配置-->
        <property name="basePackage" value="com.lyf.web.dao"/>

        <!--sqlSessionFactory 代替 jdbcTemplate-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 指定需要扫描的包（包括子包），使注解生效。dao包在mybatis-spring组件中已经扫描，这里不在需要扫描 -->

    <!--扫描注解，就无需自己装配,测试时可在此处扫描进行底层测试,正常项目会在dispatcher-servlet中进行扫描-->
    <context:component-scan base-package="com.lyf.web.service,com.lyf.web.controller"/>







<!--    配置JDBC模板-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <bean id="accountDao" class="com.lyf.bankdemo.dao.AccountDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>

    <bean id="accountService" class="com.lyf.bankdemo.service.AccountServiceImpl">
    <!--属性-->
        <property name="accountDao" ref="accountDao"/>
    </bean>

    <!--事务管理器-->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 编写通知：对事务进行增强（通知），需要编写切入点和具体执行事务的细节 -->

    <!-- 给切入点方法添加事务详情，name表示方法名称，*表示任意方法名称，propagation用于设置传播行为，read-only表示隔离级别，是否只读 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="find*" propagation="SUPPORTS"
            rollback-for="Exception"
            />

            <tx:method name="*" propagation="REQUIRED"
                       isolation="DEFAULT"
                       read-only="false"/>
        </tx:attributes>

    </tx:advice>

    <!-- aop编写，让Spring自动对目标生成代理，需要使用AspectJ的表达式 -->
    <aop:config>
        <!-- 切入点 -->
        <aop:pointcut expression="execution(* com.lyf.bankdemo.service.*.*(..))"
                      id="txPointCut" />
        <!-- 切面：将切入点与通知整合 -->
        <aop:advisor pointcut-ref="txPointCut" advice-ref="txAdvice" />
    </aop:config>










</beans>